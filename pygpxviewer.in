#!/usr/bin/env python3
from pathlib import Path
import logging
from logging.handlers import RotatingFileHandler


import sys
import os
import signal
import gi


gi.require_version('Gtk', '3.0')
gi.require_version('WebKit2', '4.1')
from gi.repository import Gio, Gtk


sys.path.insert(1, '@pkgdatadir@')
signal.signal(signal.SIGINT, signal.SIG_DFL)

log_path = Path.home().joinpath(".cache", '@application_id@')
log_path.mkdir(parents=True, exist_ok=True) 
log_file = log_path.joinpath('@application_id@' + ".log")


if '@local_build@':
    sys.path.insert(1, '@pythondir@')
    os.environ["XDG_DATA_DIRS"] = '@schemasdir@:' + os.environ.get("XDG_DATA_DIRS", "/usr/share:/usr/local/share")

    log_path = Path("logs")
    log_path.mkdir(parents=True, exist_ok=True) 
    log_file = log_path.joinpath('@application_id@' + ".log")


def set_logger():
    log = logging.getLogger()
    log.setLevel(logging.INFO)

    formatter = logging.Formatter("%(asctime)s :: %(levelname)s :: %(name)s :: %(message)s")

    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    log.addHandler(handler)

    handler = RotatingFileHandler(log_file, "a", 1000000, 10)
    handler.setFormatter(formatter)
    log.addHandler(handler)


def set_resources():
    resource = Gio.resource_load(os.path.join('@pkgdatadir@', '@application_id@.gresource'))
    Gio.Resource._register(resource)


def run_application():
    from pygpxviewer.application import Application
    application = Application('@application_id@')
    return application.run(sys.argv)


def main():
    set_logger()
    set_resources()
    return run_application()


if __name__ == '__main__':
    sys.exit(main())
